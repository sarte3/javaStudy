* 클래스

* 객체

-------------------------------------------------------------
*메소드 : 객체간의 데이터 전달 수단으로 사용

*메소드 선언 문법
[접근제어자] [속성] 리턴유형 메소드명(매개변수리스트){}

-참고
 선언부(메소드 signature라고도 한다) : 리턴유형,메소드명,매개변수리스트
 실행부 : {}블럭안의 코드

*메소드 호출 
문법> 메소드명([매개변수리스트]);


*메소드 종류 
1. 리턴값도 없고, 매개변수도 없는 메소드
문법> void 메소드명(){}
예시> void showMsg(){
			syso("안녕하세요");
     }

2. 리턴값도 없고, 매개변수도 있는 메소드
문법> void 메소드명(매개변수리스트){}
예시> void add(int num1, int num2){
			int result =num1+num2;
			syso( result );
     }

3. 리턴값 있지만, 매개변수도 없는 메소드
문법> 리턴유형 메소드명(){}
예시> int add(){
       int result =1+1;
       return result;
    }

4. 리턴값, 매개변수 있는 메소드
문법> 리턴유형 메소드명(매개변수리스트){}
예시> String upper(String str){   =>오라클의 upper('scott')
	    ....
        return 값;
     }
      
-----------------------------
*return문-교재p258참고
 - return문이 존재하면 현재 실행중인 메서드가 종료되고  
     해당 메서드를 호출한 곳으로 되돌아 간다.   

참고. 메서드가 정상적으로 종료되는 경우
	- 메서드의 블럭{}의 끝에 도달했을 때
	- 메서드의 블럭{}을 수행 도중 return문을 만났을 때
     
참고. 반환값이 없으면 return;				-> ch06.Car05참고
         반환값이 있으면 return 반환값;
-----------------------------
*method overloading - 교재p283참고
 -하나의 클래스에 같은 이름의 메서드를 여러개 정의
 -메서드의 이름이 같아야한다.
 -메서드의 매개변수 타입, 개수, 순서는 달라야 한다.
--------------------------------
*생성자(constructor) - 교재p291참고
 - 모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다.

*생성자 역할
 - 인스턴스 변수의 초기화. 필드의 초기화(ch06.Korean01 참고)
 - 인스턴스 생성시 수행할 작업에 사용

*문법
 - [접근제어자] 클래스명(매개변수리스트){}
 - 생성자의 이름은 클래스의 이름과 같아야 한다.
 - 생성자는 리턴값이 없다. (하지만 void를 쓰지 않는다.)


*기본생성자 - 교재p292참고
 - [접근제어자] 클래스명(){}
 - 매개변수가 없는 생성자
 - 클래스에 생성자가 하나도 없으면 컴파일러가 기본 생성자를 추가한다.
  (주의.생성자가 하나라도 있으면 컴파일러는 기본 생성자를 추가하지 않는다.)
 
*매개변수가 있는 생성자 - 교재p294참고
 - [접근제어자] 클래스명(매개변수리스트){}
 - 필드의 초기화(ch06.Korean01 참고)

*this() -  교재p295참고, ch06.Car03참고
	- 같은 클래스의 다른 생성자를 호출할 때 사용
  - 주의.
 		반드시 생성자안에서 
 		반드시 첫 번째 문장으로 작성되어야 한다.

--------------------------
*this -  교재p295참고, ch06.Car04참고
	– 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음
	- 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재
	
----------------------------
*매개변수의 수를 모를 때 -교재 p.267 참고
	- 메소드의 매개변수의 수는  메소드선언시 정해져 있는 것이 일반적
	  경우에 따라서는 메소드 선언시   매개변수의 개수를 알 수 없는 경우가 있다
	  예) 합구하기    1+2+3+4+5+6+....
	 해결 방법!   	매개변수를 배열타입으로 선언 
	 
문법1)	[접근제어자]  [속성] 		리턴유형 	메소드명(타입[]  매개변수명){}
문법2)	[접근제어자]  [속성] 		리턴유형 	메소드명(타입... 매개변수명){}
예문)		public  		static	void		main(String[] args){}

*배열생성- 교재189
타입[] (배열)변수명 = new int[크기];	//자동초기화
타입[] (배열)변수명 = {값1,값2,값3};  //값 지정

//메서드 선언
int 	sum(int[] values){}

int[] v = {1,2,3};	
int result   = sum(v); 										//메소드 호출 방법1

int result   = sum(10,20,30); 					//메소드 호출 방법2
int result   = sum(new int[]{10,20,30});  //메소드 호출 방법3

-----------------------------------------------------
정적 멤버 - 클래스변수, 클래스 메서드(static 메서드) 사용
-클래스 변수 : 같은 클래스의 모든 인스턴스들이 공유하는 변수
-클래스 메서드 : 메서드 내에서 인스턴스변수를 사용하지 않는다면 static을 붙이는 것을 고려한다.
 인스턴스 변수나 인스턴스 메서드와 관련없는 작업을하는 메서드

*정적메소드와 블록
-----------------------------------------------------
*final 필드
생성자를 이용한 final 멤버변수 초기화
-final이 붙은 변수는 상수이므로 보통은 선언과 초기화를 동시에 하지만,
인스턴스변수의 경우 생성자에서 초기화 할 수 있다.
-----------------------------------------------------
*상수(static final)
 - 일반적으로 불변의 값을 상수라고 부른다
 ex) pi, 지구의 둘레 등등
 - 자바에서는 상수(constant)라고 한다
 - 공용성을 띈 불변의 값을 상수
   static final 데이터타입 상수명 [= 초기값];


