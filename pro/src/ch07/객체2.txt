* 클래스

* 객체

-------------------------------------------------------------
*메소드 : 객체간의 데이터 전달 수단으로 사용

*메소드 선언 문법
[접근제어자] [속성] 리턴유형 메소드명(매개변수리스트){}

-참고
 선언부(메소드 signature라고도 한다) : 리턴유형,메소드명,매개변수리스트
 실행부 : {}블럭안의 코드

*메소드 호출 
문법> 메소드명([매개변수리스트]);


*메소드 종류 
1. 리턴값도 없고, 매개변수도 없는 메소드
문법> void 메소드명(){}
예시> void showMsg(){
			syso("안녕하세요");
     }

2. 리턴값도 없고, 매개변수도 있는 메소드
문법> void 메소드명(매개변수리스트){}
예시> void add(int num1, int num2){
			int result =num1+num2;
			syso( result );
     }

3. 리턴값 있지만, 매개변수도 없는 메소드
문법> 리턴유형 메소드명(){}
예시> int add(){
       int result =1+1;
       return result;
    }

4. 리턴값, 매개변수 있는 메소드
문법> 리턴유형 메소드명(매개변수리스트){}
예시> String upper(String str){   =>오라클의 upper('scott')
	    ....
        return 값;
     }
      
-----------------------------
*return문-교재p258참고
 - return문이 존재하면 현재 실행중인 메서드가 종료되고  
     해당 메서드를 호출한 곳으로 되돌아 간다.   

참고. 메서드가 정상적으로 종료되는 경우
	- 메서드의 블럭{}의 끝에 도달했을 때
	- 메서드의 블럭{}을 수행 도중 return문을 만났을 때
     
참고. 반환값이 없으면 return;				-> ch06.Car05참고
         반환값이 있으면 return 반환값;
-----------------------------
*method overloading - 교재p283참고
 -하나의 클래스에 같은 이름의 메서드를 여러개 정의
 -메서드의 이름이 같아야한다.
 -메서드의 매개변수 타입, 개수, 순서는 달라야 한다.
--------------------------------
*생성자(constructor) - 교재p291참고
 - 모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다.

*생성자 역할
 - 인스턴스 변수의 초기화. 필드의 초기화(ch06.Korean01 참고)
 - 인스턴스 생성시 수행할 작업에 사용

*문법
 - [접근제어자] 클래스명(매개변수리스트){}
 - 생성자의 이름은 클래스의 이름과 같아야 한다.
 - 생성자는 리턴값이 없다. (하지만 void를 쓰지 않는다.)


*기본생성자 - 교재p292참고
 - [접근제어자] 클래스명(){}
 - 매개변수가 없는 생성자
 - 클래스에 생성자가 하나도 없으면 컴파일러가 기본 생성자를 추가한다.
  (주의.생성자가 하나라도 있으면 컴파일러는 기본 생성자를 추가하지 않는다.)
 
*매개변수가 있는 생성자 - 교재p294참고
 - [접근제어자] 클래스명(매개변수리스트){}
 - 필드의 초기화(ch06.Korean01 참고)

*this() -  교재p295참고, ch06.Car03참고
	- 같은 클래스의 다른 생성자를 호출할 때 사용
  - 주의.
 		반드시 생성자안에서 
 		반드시 첫 번째 문장으로 작성되어야 한다.

--------------------------
*this -  교재p295참고, ch06.Car04참고
	– 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음
	- 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재
	
----------------------------
*매개변수의 수를 모를 때- ch06.Computer01참고, ch06.Computer01_ex01참고
			           - 교재 p267 ReferenceParam3.java 참고	
	- 메소드의 매개변수의 수는  메소드선언시 정해져 있는 것이 일반적
	  경우에 따라서는 메소드 선언시   매개변수의 개수를 알 수 없는 경우가 있다
	  예) 합구하기    1+2+3+4+5+6+....
	 해결 방법!   	매개변수를 배열타입으로 선언 
	 
문법1)	[접근제어자]  [속성] 		리턴유형 	메소드명(타입[]  매개변수명){}
문법2)	[접근제어자]  [속성] 		리턴유형 	메소드명(타입... 매개변수명){}
예문)		public  		static	void		main(String[] args){}

*배열생성- 교재189
타입[] (배열)변수명 = new int[크기];	//자동초기화
타입[] (배열)변수명 = {값1,값2,값3};  //값 지정

//메서드 선언
int 	sum(int[] values){}

int[] v = {1,2,3};	
int result   = sum(v); 										//메소드 호출 방법1

int result   = sum(new int[]{10,20,30});  //메소드 호출 방법2
int result   = sum(10,20,30); 					  //메소드 호출 방법3


-----------------------
*정적멤버 - 클래스변수, 클래스메서드(static메서드) 사용
/* -클래스변수 : 같은 클래스의 모든 인스턴스들이 공유하는 변수
 * -클래스메서드 :메서드 내에서 인스턴스변수를 사용하지 않는다면 static을 붙이는 것을 고려한다.
 * 				인스턴스변수나 인스턴스메서드와 관련없는 작업을 하는 메서드

*정적메소드와 블록
----------------------
*final
 - 사전적인 의미로 마지막의, 변경될 수 없는.
 - 클래스,필드,메서드 앞에 선언할 수 있다

*final 필드 - -교재p345참고,ch07.Person01참고

*생성자를 이용한 final 멤버변수 초기화
	-final이 붙은 변수는 상수이므로 보통은 선언과 초기화를 동시에 하지만, 
 	  인스턴스변수의 경우 생성자에서 초기화 할 수 있다.
  
*final 클래스 -교재p345참고, ch07.Ex02참고
 - 하위클래스를 생성하지x  
  
----------------------  
*상수(static final) - 교재p30참고, ch07.Earth_ex01참고
	- 일반적으로  불변의 값을  상수라고 부른다
   	예) 파이, 지구의 둘레 등등
  - 자바에서는  상수(constant)라고 한다 
       공용성을 띈 불변의 값을 상수
    static final 데이터타입  상수명 [=초기값];

-------------------------
*자바8 API
 https://docs.oracle.com/javase/8/docs/api/
 
*참고 API란?
	API(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)는 
	응용 프로그램에서 사용할 수 있도록, 
	운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다
-------------------------
*package와 import - 교재 p336참고, ch07.Ex01참고
	-서로 관련된 클래스와 인터페이스의 묶음.
	-클래스의 실제 이름(full name)은 패키지명이 포함
	 예) String클래스의 full name은 java.lang.String

-------------------------
*접근 제어자(access modifier) - 교재 p348,
	-멤버 또는 클래스에 사용되어, 외부로부터의 접근을 제한한다

 public			-	누구나 접근가능
 protected	- 동일클래스,동일패키지,(다른패키지이더라도)상속받은 하위클래스
 default		- 동일클래스,동일패키지
 private		- 동일클래스에서만 접근 가능.
 
*접근 제어자를 이용한 캡슐화 - 교재 p348
	- 접근제어자를 이용하는 이유
		: 선언된 데이터를 보호하기 위함
		: 외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서
	- 데이터가 유효한 값을 유지하도록, 또는 비번과 같은 데이터를 외부에서 함부로 변경하지 못하도록 하기위해서는
		외부로부터의 접근을 제한하는 것이 필요
		이것을 데이터 감추기(data hiding)라고 하며
		객체지향개념의 캡슐화(encapsulation)에 해당하는 내용이다
 
*생성자의 접근 제어자- 교재 p351, CH07.Singleton참고
	- 일반적으로 생성자의 접근 제어자는 클래스의 접근 제어자와 일치한다.
	- 생성자에 접근 제어자를 사용함으로써 인스턴스의 생성을 제한할 수 있다.
	
 -------------------------
 *상속 - 교재p310, ch07.CellPhone01, DmbCellPhone01, DmbCellPhone_ex01 참고
 	- 기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것.
 	- 두 클래스를 조상과 자손으로 관계를 맺어주는 것
  - 자손은 조상의 모든 멤버를 상속받는다.(생성자, 초기화블럭 제외)
  - 자손의 멤버개수는 조상보다 적을 수 없다.(같거나 많다.)
  - 공통부분은 조상에서 관리하고 개별부분은 자손에서 관리한다.
  
 
 *super - 교재p330, SupersonicAirPlane,AirPlane,SupersonicAirPlane_ex01 참고
 	– this와 같음. 조상의 멤버와 자신의 멤버를 구별하는 데 사용.
 	참고   this – 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음
 						 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재
 						 
 *오버라이딩(overriding) - 교재 p327, ch07.Calculator01, Computer01, Computer01_ex01참고
  override - vt. ‘~위에 덮어쓰다(overwrite).’, ‘~에 우선하다.’
  -조상클래스로부터 상속받은 메서드의 내용을 상속받는 클래스에 맞게 변경하는 것을 오버라이딩이라고 한다
 	
 *오버라이딩의 조건
 	1. 선언부가 같아야 한다.(이름, 매개변수, 리턴타입)
  2. 접근제어자를 좁은 범위로 변경할 수 없다.
  	 -에) 조상의 메서드가 protected라면, 범위가 같거나 넓은 protected나 public으로만 변경할 수 있다.
  3. 조상클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
  
  
  *@ Annotation - 교재p702, ch07.Computer01_ex01참고
  	- 주석처럼 프로그래밍 언어에 영향을 미치지 않으며, 유용한 정보를 제공
  	
  	예)@Override 
  	- 오버라이딩을 올바르게 했는지 컴파일러가 체크하게 한다.
  	
  -------------------------	
 *다형성(polymorphism) - 교재p354, ch07.Computer01_ex01참고
 	- 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것
 		즉, 조상타입의 참조변수로 자손타입의 객체를 다룰 수 있는 것이 다형성.
 
 *필드의 다형성 - ch11.CarExample01참고
   연관클래스 - CarExample01, Car01, HankookTire,KumhoTire 참고
   미리 제공해드린 프린트물을 참고하세요		
 
 *참조변수의 형변환 - 교재p356, ch11.ArrayList01참고
 
 *매개변수의 다형성 - 교재p367, ch11.Driver_ex01참고
   - 참조형 매개변수는 메서드 호출시, 자신과 같은 타입 또는 자손타입의 
  	  인스턴스를 넘겨줄 수 있다.
 
 *강제타입변환(Casting) - ch11.CastingEx01참고
   - 부모타입을 자식 타입으로 변환하는 것을 말한다.
     주의.  자식타입->부모타입-> 자식 타입
                 자식타입이 부모타입으로 자동 변환한 후,    부모클래스  obj =new 자식클래스();
                 다시  자식클래스 타입으로 변환할 때               (자식클래스)obj
                 강제 타입 변환을 사용할 수 있다.          자식클래스 참조변수=(자식클래스)obj
                                            
 
 *instanceof연산자 - 교재p357, ch11.Instanceof_ex01참고
 	- 참조변수가 참조하는 인스턴스의 실제 타입을 체크하는데 사용.
  - instanceof의 연산결과가 true이면, 해당 타입으로 형변환이 가능하다.
  - 강제형변환하기전에  instanceof연산자로    변환시킬 타입의 객체인지 조사하자
 
 -------------------------
 *추상클래스- 교재p375, ch07.
 	- 추상 : 실체간의 공통되는 특성을 추출
 	- 실체클래스 : 객체를 직접 생성할 수 있는 클래스
 	- 추상클래스 : (실체)클래스들의 공통적인 특성(필드,메서드)을 추출해서 선언한 클래스
 		=>추상클래스와 실체클래스는 상속관계.
 		=>class 실체클래스  extends  추상클래스
 		==> 따라서 실체클래스는 추상클래스의  모든 필드,메서드를  물려받고
 						 필요시  추가적인 특성을 가질 수 있다
 		추상클래스는 			실체클래스의 	 공통적인 특성만을 추출해서 만들었기 때문에
 		직접 생성해서 사용할 수 없다. => new 연산자를 사용해서   인스턴스를 생성시키지 못한다.
 
 public abstract class 클래스명{
 	//field
 	//constructor
 	//method
 }  
 
   Phone
   smartPhone
 
 -------------------------
 *인터페이스(interface)- 교재p381, ch07.
 - 일종의 추상클래스. 추상클래스(미완성 설계도)보다 추상화 정도가 높다.
 - 실제 구현된 것이 전혀 없는 기본 설계도.(알맹이 없는 껍데기)
 - 추상메서드와 상수만을 멤버로 가질 수 있다.
 - 인스턴스를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다.
 - 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다.
 
 
 *인터페이스 선언 -교재382, ch11.PersonDTO참고
 [접근제어자]  interface  인터페이스명{
 	//구성요소(멤버)는 추상메서드와 상수만 가능하다
 	public static final  타입  상수명 = 값;   //상숭
 	public abstract  메서드명(매개변수리스트);  //{}가 없음을 주의!
 	
 	//1.8이후
 	//디폴트 메서드
 	[public] default 리턴타입 메서드명(매개변수){}
 	
 	//정적 메서드
 	[public] static 리턴타입 메서드명(매개변수){}
 }
 
 => ch07.RemoteControl //인터페이스
 				 TV						//구현클래스
 				 Audio				//구현클래스
 				 RemoteControl_ex01//실행클래스
 
 
 *인터페이스  구현 -교재382, ch11.PersonDTO참고
 클래스명  implements  인터페이스명1,..인터페이스명n{
	 //주의! 인터페이스에 정의된 추상메서드를 반드시  완성해야 한다.
	 //인터페이스에 정의된 추상메서드를  반드시 오버라이딩해야함
}
예) public class PersonDTO implements Comparable<PersonDTO>{}
 
 *인터페이스를 이용한 다형성-교재387
  - 인터페이스 타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를  참조할 수 있다.
  - 인터페이스를 메서드의 매개변수 타입으로 지정할 수 있다.
  - 인터페이스를 메서드의 리턴타입으로 지정할 수 있다.
 (참고 매개변수의 다형성 - 교재p367)
 
 
 *인터페이스의 장점-교재390
 	1. 개발시간을 단축시킬 수 있다.
 	2. 표준화가 가능하다
  3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
  4. 독립적인 프로그래밍이 가능하다.
  
 -------------------------
 *클래스
 java.util.Scanner- 교재p510
 
 -------------------------
 *컬렉션프레임워크(중요★★★★★)- 교재p578, ch11_CF.ppt
	- 컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
 	- 컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공
 	
 *컬렉션 프레임웍의 핵심 인터페이스- 중요★★★★★	
 *List - 순서유지, 중복허용			예)대기자목록
 *Set	 - 순서유지x, 중복허용x
 *Map  - key,value가 한 쌍으로 구성
 				  순서유지x, key는 중복허용x, value은 중복허용 
 
 Collection인터페이스 - 자손인터페이스 List, Set
 Collections클래스
 
 *Vector - 교재p  ch11.Vector01
  -ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일
  
 
 *ArrayList클래스 - 교재p584, ch11.ArrayList01
   - 데이터의 저장공간으로 배열을 사용한다.(배열기반)
   - 객체를 추가하면  인덱스0부터 차례대로 저장된다.
   - 특정 인덱스의 객체를 제거하면   바로 뒤 인덱스부터 마지막 인덱스까지 모두   1씩 당겨진다  remove(int index)
   - 특정 인덱스의 객체를 추가하면       해당 인덱스부터 마지막 인덱스까지 모두   1씩 밀려난다 add(int index, Object value)
   		==> (중간)객체를 제거, 삭제가 빈번한 경우에는  처리속도가 더디므로..
   		====> LinkedList사용
   
* LinkedList - 교재p596, ch11.LinkedList01
	- 배열과 달리 링크드 리스트는 불연속적으로 존재하는 데이터를 연결(link)
	- ArrayList는    내부 배열에  객체를  저장해서		index로 관리
	  LinkedList는  인접참조를   link해서 체인처럼 관리

*ArrayList vs. LinkedList – 성능 비교, ch11.LinkedList01
     ① 순차적으로 데이터를 추가/삭제 - ArrayList가 빠름
   	 ② 비순차적으로 데이터를 추가/삭제 - LinkedList가 빠름
   	 ③ 접근시간(access time) - ArrayList가 빠름
   	 
 *HashSet클래스		- 교재p631, ch11.HashSet02_ex,  MemberDTO_02참고
    순서유지x, 중복허용x
  HashSet은  객체를 저장하기 전에     
   먼저  객체의 hashCode()를 호출해서  해시코드를 얻어낸다 .
   이미  저장되어 있는 객체들의  해시코드와 비교한다.
  만약 동일한 해시코드가 있다면  equals()메소드로  두 객체를 비교해서    true가 나오면
  동일한 객체로 판단하고          중복저장을 하지 않다.
  hashCode() 리턴값:true -> equals() 리턴값: true => (중복되니)저장x
                  :false-> 다른 객체                         => (중복x)  저장
 
 *참고
  객체 해시코드란? : 객체를 식별할 하나의 정수값
 Object의  hashCode()함수는   객체의 메모리 번지를 이용해서 해시코드를 만들기때문에 객체마다 다른 값을 가진다
 
 *TreeSet - 교재p638,ch11.TreeSet,  ch11.PersonDTO_ex
 	- 범위 검색과 정렬에 유리한 이진 검색 트리(binary search tree)로 구현
 	    링크드 리스트처럼 각 요소(node)가  나무(tree)형태로 연결된 구조
 	- 이진 트리는 모든 노드가 최대 두 개의 하위 노드를 갖음(부모-자식관계)  
  - 이진 검색 트리는 부모보다 작은 값을 왼쪽에, 큰 값은 오른쪽에 저장(교재 p640)=>ppt  ch11의 39슬라이드 참고
  - HashSet보다 데이터 추가, 삭제에 시간이 더 걸림(반복적인 비교 후 저장)
  
 *참고
 	Object클래스 - 교재p450
 	- equals(Object obj)함수 : 객체 자신과 주어진 객체(obj)를 비교한다. 같으면 true, 다르면 false.
	 	- Object클래스에 정의된 equals()는 참조변수 값(객체의 주소)을 비교한다.
	 	- equals()를 오버라이딩해서 인스턴스변수의 값을 비교하도록 바꾼다 
 
  - hashCode()함수 : 객체의 해시코드(int타입의 정수)를 반환하는 메서드(해시함수)
    - Object클래스의 hashCode()는 객체의 내부주소를 반환한다.
    - equals()를 오버라이딩하면, hashCode()도 같이 오버라이딩 해야한다.
      equals()의 결과가 true인 두 객체의 hash code는 같아야하기 때문
      
 /* equals(Object obj) 메소드 재정의시 - ch11.MemberDTO_02참고
	 * 1.Object타입의 매개변수 obj에는  모든 객체가  매개값으로 제공될 수 있으므로
	 *   instanceof 연산자롤  기준 객체와  동일타입인지 먼저 확인을 해야 한다
	 *   동일타입이면  true를 반환
	 * 2.비교객체가  동일한 타입이라면   기준 객체타입으로 강제타입변환해서
	 *   특정 필드값이 동일한지 비교
	 */   
 
 *HashMap  - 교재 p644, ch11.HashMap01참고
  key,value가  한 pair구성 
   추가: put(Object key,Object value)
   찾기: Object get(Object key)  
   삭제: remove(Object key) 
 
 *Iterator - 교재p614 , ch11.HashMap01
 	- 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화한 것 
 	- 컬렉션에 iterator()를 호출해서 Iterator를 구현한 객체를 얻어서 사용.
 
 *Map.Etry인터페이스 - 교재p583, ch11.HashMap01참고
 	- Map인터페이스의 내부 인터페이스
 
 *Hashtable - 교재 p644,ch11.HashTable01참고
 
 *Properties-교재 p658, ch11.Properties01참고
 	- 내부적으로 Hashtable을 사용하며, key와 value를 (String, String)로 저장
 	- 주로 어플리케이션의 환경설정에 관련된 속성을 저장하는데 사용되며 
 	    파일로부터 편리하게 값을 읽고 쓸 수 있는 메서드를 제공한다.
 
 	
 *지네릭스(Generics) - 교재p670
 	- 컴파일시 타입을 체크해 주는 기능(compile-time type check) – JDK1.5
 	- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌
 	  (하나의 컬렉션에는 대부분 한 종류의 객체만 저장)
 
 
 	  
-------------------------
  <데이터입출력구현>
  *DB연동 - 미리 제공해드린 JDBC 프로그래밍.pdf참고
   CRUD 문법
 
 //각종 필요한 변수선언 - 예)conn, stmt, pstmt, rs, sql
	try {
		//1.드라이버 로딩
		//2.Connection객체얻기
		//3-1.실행객체-PreparedStatement객체,Statement객체
		//3-2.쿼리문실행 - executeUpdate(): insert,update,delete
		//				executeUpdate()의 리턴형태는 int
		//				executeQuery() : select
		//				executeQuery()의 리턴형태는 ResultSet
		//4. 추가작업
	}catch(Exception객체) { 
		/*~~~~ */ 
	}finally{   /*5. 사용한 객체는 반납: 객체.close(); */ }
 
-------------------------
*예외처리 -교재p414참고
*예외처리하기 try~catch문	-교재p416
*finally블럭 		   			-교재p434	

*다중catch절   :
 주의. 하위Exception클래스부터 먼저 작성하고
       상위Exception클래스는   뒤에  명시
	
try{
		//코드
		//위험코드
		//위험코드
}catch(하위Exception클래스명 참조변수){
		//예외발생 처리 코드
}catch(상위Exception클래스명 참조변수){
		//예외발생 처리 코드
}catch(Exception클래스명 참조변수){
		//예외발생 처리 코드
}finally{
		//finally 블럭에는
		//catch절에 들어가던 들어가지않던
		//무조건 실행해야하는 코드를 작성한다
		//예) DB연동시의 자원반납  
} 
 
 
 
 
 










	 
       
 






















